- content_for :head do
  = javascript_include_tag %w(raphael/raphael-min.js raphael/g.raphael-min.js raphael/g.pie-min.js raphael/g.line-min.js)

= User.count
users (of which
= User.where('sources.is_pro' => true).count
are pro users at flickr and
= User.where(:email => {'$exists' => true}).count
given their email address)
have imported
= Photo.count
photos and created
= Website.count
websites.
= Navvy::Job.count
jobs outstanding.

%h2 Latest errors
%dl
  - User.where('sources.error_messages' => {"$exists" => true}).collect(&:sources).flatten.each do |source|
    - next if source.error_messages.empty?
    %dt= source.photostream_url
    %dd= source.error_messages.last

%h2 Latest websites
%ul
  - @websites.each do |website|
    %li= link_to website.title, website.url

%h2 Newest users
%ul
  - @users.each do |user|
    %li
      = "%s (%s, %s photos): " % [user.login, user.created_at.to_s(:short), user.photos.count]
      - user.sources.each do |source|
        = link_to source.username, source.photostream_url
= will_paginate @users

- user_photos_counter = {}
- User.only(:id).each do |user|
  - k = 2 ** (user.photos.count.to_s(2).length - 1)
  - user_photos_counter[k] ||= 0
  - user_photos_counter[k] += 1
- user_photos_counter = user_photos_counter.sort{|a,b| a[0].to_i<=>b[0].to_i}
#user_photos
:javascript
  var r;
  window.onload = function () {
    r = Raphael("user_photos");

    r.g.piechart(300, 120, 100, [#{user_photos_counter.collect{|c|c[1]}.join(',')}], {stroke: 'black',
        legend: ['%% less than #{user_photos_counter.collect{|c|c[0]}.join(" photos' , '%% less than ")} photos'], legendpos: 'east', legendcolor: 'white', type: 'round'});
  };
